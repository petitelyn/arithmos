{
    "collab_server" : "",
    "contents" : "library(shiny)\nsource(\"helpers.R\")\n#files <- read.csv(\"D:/analysis/Processed_Wide.csv\",header = T)\nfiles <- NULL\nt1 <- 0\nt2 <- 0\n\nshinyServer(function(input, output, session) {\n  \n################################################################################################ \n  upload_files <- observeEvent(input$file,{\n    full_name_list <- input$file$name\n    datapath_list <- input$file$datapath\n    file_name_list <- list(100)\n    for (j in 1:length(full_name_list)){\n      file_split <- strsplit(full_name_list[[j]], \"\\\\.\")[[1]]\n      file_type <- file_split[[2]]\n      if (!(strcmp(file_type, \"xlsm\") == TRUE)) {\n        print(\"Incorrect file type: Need two sheets, first with general info second with the data\")\n        return()\n      }\n      file_name_list[[j]] <- file_split[[1]]\n    }\n    count <- 1\n    #hardcoded value\n    csv_list <- list(100)\n    dir.create(\"temp_\", recursive = TRUE)\n    for (p in 1:length(file_name_list)) {\n      for (i in 1:2) {\n        convert_to_csv <- readWorksheetFromFile(datapath_list[[p]], header=F, sheet=i)\n        convert_to_csv[is.na(convert_to_csv)] <- \"\"\n        new_file_name <- paste(\"temp_dir/\", file_name_list[p],\"_temp\",  toString(i), \".csv\", sep='')\n        write.table(convert_to_csv, new_file_name, na='', quote=F, row.names=F, col.names=F, sep=',')\n        csv_list[[count]] <- new_file_name\n        count <- count + 1\n      }\n    }\n    con <- connectDatabase(\"postgres\", \"localhost\", \"postgres\", 5432, \"Passw0rd\")\n    for (i in seq(1, length(csv_list), 2)) {\n      addStudy(con, csv_list[[i]], csv_list[[i+1]], strsplit(file_name_list[[ceiling(i/2)]], \"\\\\.\")[[1]][[1]])\n    }\n    dbDisconnect(con)\n    unlink(\"temp_dir\", recursive = TRUE)\n    print(\"DONE\")\n  })\n  \n  \n  \n  loadStudies <- observeEvent(input$projectChoice, {\n    con <- connectDatabase(\"postgres\", \"localhost\", \"postgres\", 5432, \"Passw0rd\")\n    get_project_pk <- sprintf(\"SELECT pk FROM project WHERE project_code=\\'%s\\'\", input$projectChoice)\n    project_pk <- dbGetQuery(con, get_project_pk)[[\"pk\"]]\n    get_studies <- sprintf(\"SELECT study_name FROM study WHERE study.project_pk=%i\", project_pk)\n    study_list <- dbGetQuery(con, get_studies)[[\"study_name\"]]\n    updateSelectInput(session, \"studyChoices\", choices=study_list, selected=study_list)\n  })\n  \n  \n  databaseSearch <- observeEvent(input$search,{\n    con <- connectDatabase(\"postgres\", \"localhost\", \"postgres\", 5432, \"Passw0rd\")\n    \n    search_query <- sprintf(\"SELECT pk FROM study WHERE study_name LIKE \\'%s\\'\", input$databaseSearch)\n    study_list  <<- dbGetQuery(con, search_query)\n    if(!(nrow(study_list) == 0)) updateSelectInput(session, \"databaseChoice\", choices=study_list[,\"pk\"])\n    else updateSelectInput(session, \"databaseChoice\", choices=dbGetQuery(con, \"SELECT pk FROM study\")[\"pk\"])\n    dbDisconnect(con)\n  })\n  \n  loadData <- observeEvent(input$load, {\n    con <- connectDatabase(\"postgres\", \"localhost\", \"postgres\", 5432, \"Passw0rd\")\n    study_name_list <- input$studyChoices\n    pk_list <- list()\n    for (i in 1:length(study_name_list)){\n      search_query <- sprintf(\"SELECT pk FROM study WHERE study_name=\\'%s\\'\", study_name_list[[i]])\n      pk_list[i] <- dbGetQuery(con, search_query)\n    }\n    frame <- getStudyDataFrame(con, pk_list)\n    wide_format <- spread(frame, \"new_name\", \"value\")\n    files <<- wide_format\n    updateSelectInput(session, \"chosenVariables\", choices=colnames(files[-c(1:2)]))\n    dbDisconnect(con)\n  })\n  \n  loadVariable <- observeEvent(input$acrossVariableSelect,{\n    updateSelectInput(session, \"chosenVariables\", choices=c(input$acrossVariableSelect))\n  })\n  \n  \n################################################################################################ \n  \n  processButton <- eventReactive(input$upload,{\n    files\n  })\n  \n  #upload_files <- eventReactive(input$upload,{\n    # if(is.null(input$file))\n    #   return()\n    # \n    # if (input$type == 'xlsx' | input$type == 'xlsm'){\n    #   files <<- readWorksheetFromFile(input$file$datapath, header = T, sheet = 1)\n    #   for (i in 1:length(colnames(files))){\n    #     files[,i] <<- as.numeric(as.character(files[,i]))\n    #   }\n    # }\n    # \n    # if (input$type == 'csv'){\n    #   files <<- read.csv(input$file$datapath, sep = ',', header = T)\n    #   for (i in 1:length(colnames(files))){\n    #     files[,i] <<- as.numeric(as.character(files[,i]))\n    #   }\n    # } \n    \n  #   for (i in 1:length(colnames(files))){\n  #     files[,i] <<- as.numeric(as.character(files[,i]))\n  #   }\n  #   \n  #   files\n  # })\n\n  # output$select_all <- renderUI({\n  #   upload_files()\n  #   if(length(upload_files()) > 0){\n  #     radioButtons(\"Select_all\", \"Select all variables?\", choices = c(\"Yes\" = 1, \"No\" = 2), selected = 1, inline = T)\n  #   }\n  # })\n  \n  output$choose_var <- renderUI({\n    processButton()\n    if(length(input$Select_all) > 0){\n      if(input$Select_all == 2){\n        selectizeInput(\"choose_variable\", \"Select explanatory variables\", choices = colnames(files), \n                       multiple = T)\n      }\n      else if(input$Select_all == 1){\n        selectInput(\"choose_variable\", \"Select explanatory variables\", choices = colnames(files[-c(1:2)]), \n                    multiple = T, selectize = F, selected = colnames(files[-c(1:2)]), size = 10)\n      }\n    }\n  })\n  \n  output$select_group_var <- renderUI({\n    processButton()\n    if(length(files) > 0){\n      selectizeInput(\"group_variable\", \"Select group variable\", choices = colnames(files),selected = colnames(files)[2])\n    }\n  })\n  \n  output$select_func <- renderUI({\n    processButton()\n    if(length(files) > 0){\n      selectInput(\"main_function\",\n                  \"Select main function\", \n                  choices = c(\"Basic Statistics\" = 1,\n                              \"Correlation\" = 2,\n                              \"Principal Compoment Analysis\" = 3,\n                              \"Hierarchical Clustering & Heatmaps\" = 4)\n                  )\n    }\n  })\n  \n  output$help1 <- renderUI({\n    processButton()\n    if(length(files) > 0){\n      helpText(\"Click the Select button after you have finished selecting the explanatory variables, \n               the group variable and the main function.\")\n    }\n  })\n  \n  output$select_var <- renderUI({\n    processButton()\n    actionButton('select_variable', \"Select\")\n  })\n  \n  selec_var <- eventReactive(input$select_variable,{\n    list(input$choose_variable, input$group_variable, input$main_function)\n  })\n  \n  lst <- list()\n  lst[[1]] <- \"Basic Statistics\"\n  lst[[2]] <- \"Correlation\"\n  lst[[3]] <- \"Principal Component Analysis\"\n  lst[[4]] <- \"Hierarchical Clustering & Heatmaps\"\n\n  output$help2 <- renderUI({\n    selec_var()\n    helpText(\"You have selected \",length(selec_var()[[1]]),\" explanatory variables, \",\n             selec_var()[[2]], \" as the group variable and \",lst[[as.numeric(selec_var()[[3]])]],\n             \" as the main function.\")\n  })\n\n######################################################################################  \n# List of makeText and makePlot functions\n######################################################################################  \n  #Basic Statistics Table\n  makeText1.1 <- reactive({\n    options(digits = 3)\n    variable <- files[,colnames(files) %in% selec_var()[[1]],drop = FALSE]\n    info <- describe(variable)\n    \n    if (length(variable) > 1){\n      Missing <- NULL\n      for (j in 1:length(variable)){\n        Missing <- c(Missing, count_missing(variable[,j]))\n      }\n    }\n    else{\n      Missing <- count_missing(variable[,1])\n    }\n    \n    info <- cbind(info[2],Missing,info[3:13])\n    info[,-6]\n  })\n  \n  #Boxplot \n  makePlot1.2 <- function(text_size){\n    if(length(input$choose_variable1.2) > 0){\n      variable <- files[,colnames(files) %in% input$choose_variable1.2,drop = FALSE]\n      \n      group_var <- files[,colnames(files) %in% selec_var()[[2]],drop = FALSE]\n      variable$Group <- as.factor(group_var[,1])\n      df <- melt(variable, id.vars = \"Group\")\n      \n      p <- ggplot(df, aes(variable, value, fill = variable)) + \n        geom_boxplot(width = (0.05 * length(colnames(variable)))) +\n        theme(text = element_text(size=text_size), \n              axis.text.x = element_text(angle=45, hjust=1,margin=margin(10,0,0,0)),\n              axis.text.y = element_text(margin=margin(0,10,0,0)),\n              panel.border = element_rect(colour = \"black\", fill=NA, size=1),\n              axis.title.x = element_text(margin=margin(20,0,0,0)),\n              axis.title.y = element_text(margin=margin(0,20,0,0)),\n              plot.title = element_text(margin=margin(0,0,20,0)),\n              legend.key.height = unit(2.5, \"line\")) +\n        ggtitle(input$main1.2)\n      p\n    }\n  }\n  \n  #Boxplot by group\n  makePlot1.3 <- function(text_size){\n    if(length(input$choose_variable1.3) > 0){\n      variable <- files[,colnames(files) %in% input$choose_variable1.3,drop = FALSE]\n      \n      group_var <- files[,colnames(files) %in% selec_var()[[2]],drop = FALSE]\n      variable$Group <- as.factor(group_var[,1])\n      df <- melt(variable, id.vars = \"Group\")\n      \n      p <- ggplot(df, aes(variable, value, fill = Group)) + geom_boxplot(width = (0.05 * length(colnames(variable)))) + \n        theme(text = element_text(size=text_size), \n              axis.text.x = element_text(angle=45, hjust=1, margin=margin(10,0,0,0)),\n              axis.text.y = element_text(margin=margin(0,10,0,0)),\n              panel.border = element_rect(colour = \"black\", fill=NA, size=1),\n              legend.key.height = unit(2.5, \"line\"),\n              axis.title.x = element_text(margin=margin(20,0,0,0)),\n              axis.title.y = element_text(margin=margin(0,20,0,0)),\n              plot.title = element_text(margin=margin(0,0,20,0))) +\n        ggtitle(input$main1.3) \n      p\n    }\n  }\n  \n  #Correlation Table\n  makeText2.1.1 <- function(){\n    variable <- files[,colnames(files) %in% selec_var()[[1]],drop = FALSE]\n    info <- cor(variable, use = \"pairwise.complete.obs\", method = input$type2)\n    info\n  }\n  \n  #P Value Table\n  makeText2.1.2 <- function(){\n    variable <- files[,colnames(files) %in% selec_var()[[1]],drop = FALSE]\n    p.mat <- cor.mtest(variable, u = \"pairwise.complete.obs\", met = input$type2)\n    p.mat\n  }\n  \n  #Correlation Matrix\n  makePlot2.2 <- function(text_size){\n    if(length(input$choose_variable2.2) >= 2){\n      if(input$type2 == \"pearson\"){\n        r <- \"r\"\n      }\n      \n      if(input$type2 == \"spearman\"){\n        r <- \"rho\"\n      }\n      \n      variable <- files[,colnames(files) %in% input$choose_variable2.2,drop = FALSE]\n      \n      info <- cor(variable, use = \"pairwise.complete.obs\", method = input$type2)\n      p.mat <- cor.mtest(variable, u = \"pairwise.complete.obs\", met = input$type2)\n      \n      j <- NULL\n      for (i in 1:length(info[1,])){\n        if (all_missing(info[,i])){\n          j <- c(j,i)\n        }\n      }\n      \n      if(length(j) > 0){\n        info <- info[,-j]\n        p.mat <- p.mat[,-j]      \n      }\n      \n      j <- NULL\n      for (i in 1:length(info[,1])){\n        if (all_missing(info[i,])){\n          j <- c(j,i)\n        }\n      }\n      \n      if(length(j) > 0){\n        info <- info[-j,]\n        p.mat <- p.mat[-j,]\n      }\n      \n      cordata <- melt(info)\n      pdata <- melt(p.mat)\n      \n      cordata$labelr = abbreviateSTR_R(melt(cordata)$value, prefix = r)\n      cordata$labelP = abbreviateSTR_P(melt(pdata)$value, prefix = 'p', 0.05)\n      cordata$label = paste(cordata$labelr, \"\\n\", \n                            cordata$labelP, sep = \"\")\n      \n      cordata.lower = subset(cordata[lower.tri(info, diag = T),])\n      cordata.lower$Var1 <- with(cordata.lower, factor(cordata.lower$Var1, levels = rev(levels(cordata.lower$Var1))))\n      \n      txtsize <- par('din')[2] / 2\n      p <- ggplot(cordata.lower, aes(x=Var1, y=Var2)) + geom_tile(aes(fill = value), colour = \"black\") + theme_classic() +\n        theme(legend.key.height = unit(2.5, \"line\"),\n              axis.text.x = element_text(size = text_size, angle=45, hjust=TRUE, margin=margin(10,0,0,0)),\n              axis.text.y = element_text(size = text_size, margin=margin(0,10,0,0)),\n              plot.title = element_text(size = text_size, margin=margin(0,0,10,0))) +\n        xlab(\"\") + ylab(\"\") + \n        geom_text(label = cordata.lower$label, size = (10/(length(colnames(variable))**0.5))) +\n        # scale_fill_gradient2(name=r,limit = c(-1,1),low = \"#BB4444\", high = \"Yellow\") +\n        scale_fill_gradientn(name=r, colours = rev(rainbow(20*10, start = 0/6, end = 4/6))) +\n        ggtitle(input$main2.2) +\n        annotate(\"text\", x = length(p.mat[,1]), y = length(p.mat[,1]) , label = paste(\"** p<0.01\", \" * p<0.05\", sep = \"\\n\"), size = 3)\n      p\n    } \n  }\n  \n  #Significance Table Results\n  makeText2.3.1 <- reactive({\n    if(input$type2 == \"pearson\"){\n      r <<- \"r\"\n    }\n    \n    if(input$type2 == \"spearman\"){\n      r <<- \"rho\"\n    }\n    \n    info1 <- paste(\"The table below displays which variables have statistically significant (p<\",input$choose_alpha_level2.3,\")\", sep = \"\")\n    info2 <- paste(\"correlation values with the selected variable.\")\n    info3 <- paste(\"\")\n    info4 <- paste(r, \" = correlation coefficient\", sep = \"\")\n    info5 <- paste(\"p = p-value\")\n    info6 <- paste(\"n = number of paired samples\")\n    info7 <- paste(\"\")\n    info8 <- paste(\"Number of significant variables:\", length(makeTable2.3()[,1]))\n    \n    if(length(makeTable2.3()[,1]) == 0){\n      info9 <- paste(\"Lowest P-value:\", 0)\n      info10 <- paste(\"Highest P-value:\", 0)\n    }\n    \n    else if(length(makeTable2.3()[,1]) != 0){\n      info9 <- paste(\"Lowest P-value:\", round(min(makeTable2.3()[,3]),3))\n      if(round(min(makeTable2.3()[,3]),3) < 0.01){\n        info9 <- paste(\"Lowest P-value:\", \"<0.01\")\n      }\n      \n      info10 <- paste(\"Highest P-value:\", round(max(makeTable2.3()[,3]),3))\n      if(round(max(makeTable2.3()[,3]),3) < 0.01){\n        info10 <- paste(\"Highest P-value:\", \"<0.01\")\n      }\n    }\n    \n    cat(sprintf(info1), \"\\n\")\n    cat(sprintf(info2), \"\\n\")\n    cat(sprintf(info3), \"\\n\") \n    cat(sprintf(info4), \"\\n\")\n    cat(sprintf(info5), \"\\n\")\n    cat(sprintf(info6), \"\\n\")\n    cat(sprintf(info7), \"\\n\")\n    cat(sprintf(info8), \"\\n\")\n    cat(sprintf(info9), \"\\n\")\n    cat(sprintf(info10), \"\\n\")\n  })\n  \n  #Correlation Significance Table\n  makeTable2.3 <- function(){\n    \n    n <- NULL\n    for(i in rownames(makeText2.1.2())){\n      df <- files[,colnames(files) %in% c(input$choose_variable_2.3.1,i)]\n      df <- na.omit(df)\n      n <- c(n,length(rownames(df)))\n    }\n    \n    if(input$type2 == \"pearson\"){\n      df <- data.frame(Variable = rownames(makeText2.1.2()),\n                       r = as.numeric(makeText2.1.1()[,colnames(makeText2.1.1()) %in% input$choose_variable_2.3.1]),\n                       p = as.numeric(makeText2.1.2()[,colnames(makeText2.1.2()) %in% input$choose_variable_2.3.1]),\n                       n = n)\n    }\n    \n    if(input$type2 == \"spearman\"){\n      df <- data.frame(Variable = rownames(makeText2.1.2()),\n                       rho = as.numeric(makeText2.1.1()[,colnames(makeText2.1.1()) %in% input$choose_variable_2.3.1]),\n                       p = as.numeric(makeText2.1.2()[,colnames(makeText2.1.2()) %in% input$choose_variable_2.3.1]),\n                       n = n)\n    }\n    \n    df <- df[-which(df[,1] == input$choose_variable_2.3.1),]\n    df <- df[is.na(df$p) == F,]\n    df <- df[df$p <  input$choose_alpha_level2.3,]\n    df <- df[order(df[,3]),]\n  }\n  \n  makeText2.3.2 <- reactive({\n    info1 <- paste(\"The graph below displays the scatter plot between variables that\")\n    info2 <- paste(\"have statistically significant correlation between each other.\")\n    cat(sprintf(info1), \"\\n\")\n    cat(sprintf(info2), \"\\n\")\n  })\n  \n  #Scatterplot\n  makePlot2.3 <- function(text_size){\n    variable <- files[,colnames(files) %in% c(input$choose_variable_2.3.2, input$choose_variable_2.3.3),drop = FALSE]\n    group <- files[,colnames(files) %in% selec_var()[[2]], drop = FALSE]\n    ID <- files[,1, drop = F]\n    \n    variable_1 <- na.omit(variable)\n    group_1 <- group[as.numeric(rownames(variable_1)),]\n    ID_1 <- ID[as.numeric(rownames(variable_1)),]\n    \n    df <- cbind(ID_1, group_1, variable_1)\n    df[,2] <- as.factor(df[,2])\n    \n    colnames(df)[1:2] <- c(\"ID\", \"Group\")\n    \n    if(input$type2.3.1 == 1){\n      p <- ggplot(df, aes_string(x=input$choose_variable_2.3.2, y=input$choose_variable_2.3.3)) + geom_point(size=2, aes(colour=Group))  +\n        scale_colour_hue(l=50) + # Use a slightly darker palette than normal\n        geom_smooth(method=lm,   # Add linear regression lines\n                    se=FALSE,    # Don't add shaded confidence region\n                    aes(colour = Group),\n                    fullrange=TRUE) +\n        theme(text = element_text(size=text_size),\n              axis.line.x = element_line(colour = \"black\", size = 1),\n              axis.line.y = element_line(colour = \"black\", size = 1),\n              axis.title.x = element_text(margin=margin(20,0,0,0)),\n              axis.title.y = element_text(margin=margin(0,20,0,0)),\n              axis.text.x = element_text(margin=margin(10,0,0,0)),\n              axis.text.y = element_text(margin=margin(0,10,0,0)),\n              plot.title = element_text(margin=margin(0,0,10,0)),\n              legend.key.height = unit(2.5, \"line\")) +\n        ggtitle(input$main2.3)\n    }\n    \n    if(input$type2.3.1 == 2){\n      p <- ggplot(df, aes_string(x=input$choose_variable_2.3.2, y=input$choose_variable_2.3.3)) + geom_point(size=2) + \n        scale_colour_hue(l=50) + # Use a slightly darker palette than normal\n        geom_smooth(method=lm,   # Add linear regression lines\n                    se=FALSE,    # Don't add shaded confidence region\n                    fullrange=TRUE) +\n        theme(text = element_text(size=text_size),\n              axis.line.x = element_line(colour = \"black\", size = 1),\n              axis.line.y = element_line(colour = \"black\", size = 1),\n              axis.title.x = element_text(margin=margin(20,0,0,0)),\n              axis.title.y = element_text(margin=margin(0,20,0,0)),\n              axis.text.x = element_text(margin=margin(10,0,0,0)),\n              axis.text.y = element_text(margin=margin(0,10,0,0)),\n              plot.title = element_text(margin=margin(0,0,10,0))) +\n        ggtitle(input$main2.3) \n    }\n    p\n  }\n  \n  #PCA Results\n  makeText3.1 <- function(){\n    variable <- files[,colnames(files) %in% selec_var()[[1]],drop = FALSE]\n    group <- files[,colnames(files) %in% selec_var()[[2]], drop = FALSE]\n    \n    variable_1 <- na.omit(variable)\n    group_1 <<- factor(group[as.numeric(rownames(variable_1)),])\n    \n    if(input$type3.1 == 1){\n      var.pca <- prcomp(variable_1, center = TRUE, scale. = TRUE) \n    }\n    \n    if(input$type3.1 == 2){\n      var.pca <- prcomp(variable_1, center = FALSE, scale. = FALSE) \n    }\n    \n    info <- summary(var.pca)\n    eigen <- info[[1]]^2\n    newinfo <- rbind(\"Eigenvalues\" = eigen, info$importance)\n    newinfo\n  }\n  \n  #PCA Biplot\n  makePlot3 <- function(text_size){\n    variable <- files[,colnames(files) %in% selec_var()[[1]],drop = FALSE]\n    group <- files[,colnames(files) %in% selec_var()[[2]], drop = FALSE]\n    ID <- wide[,1,drop=F]\n    \n    variable_1 <- na.omit(variable)\n    group_1 <- factor(group[as.numeric(rownames(variable_1)),])\n    ID_1 <- ID[as.numeric(rownames(variable_1)),]\n    \n    if(input$type3.1 == 1){\n      var.pca <- prcomp(variable_1, center = TRUE, scale. = TRUE) \n    }\n    \n    if(input$type3.1 == 2){\n      var.pca <- prcomp(variable_1, center = FALSE, scale. = FALSE) \n    }\n    \n    df <- data.frame(cbind(ID_1,group_1,var.pca$x))\n    df[,2] <- as.factor(df[,2])\n    \n    g <- ggbiplot(var.pca, varname.size = 4, obs.scale = 1, var.scale = 1,\n                  choices = c(as.numeric(str_sub(input$type3.2,3)),\n                              as.numeric(str_sub(input$type3.3,3))),\n                  group = group_1, ellipse = TRUE,\n                  circle = F) +\n      geom_point(aes(color=group_1, size = 3)) + scale_size_identity() +\n      theme(legend.direction = 'vertical', legend.position = 'right',\n            legend.key.height = unit(2.5, \"line\"),\n            text = element_text(size=text_size),\n            axis.title.x = element_text(margin=margin(20,0,0,0)),\n            axis.title.y = element_text(margin=margin(0,20,0,0)),\n            axis.text.x = element_text(margin=margin(10,0,0,0)),\n            axis.text.y = element_text(margin=margin(0,10,0,0)),\n            axis.title = element_text(margin=margin(0,0,20,0))) +\n      \n      ggtitle(input$main3)\n    \n    g\n  }\n  \n  #PCA Biplot Results\n  makeText3.2 <- reactive({\n    x <- makeText3.1()[3,which(colnames(makeText3.1()) == input$type3.2)]\n    x <- round((x*100),1)\n    y <- makeText3.1()[3,which(colnames(makeText3.1()) == input$type3.3)]\n    y <- round((y*100),1)\n    info1 <- paste(\"The principal component on the x axis explains\", paste(x,\"%\", sep = \"\"), \"of the total variation of the variables.\")\n    info2 <- paste(\"The principal component on the y axis explains\", paste(y,\"%\", sep = \"\"),  \"of the total variation of the variables.\")\n    \n    variable <- files[,colnames(files) %in% selec_var()[[1]],drop = FALSE]\n    group <- files[,colnames(files) %in% selec_var()[[2]], drop = FALSE]\n    variable_1 <- na.omit(variable)\n    group_1 <<- factor(group[as.numeric(rownames(variable_1)),])\n    df <- cbind(group_1,variable_1)\n    \n    count <- 2\n    info <- cbind(info1, info2)\n    for (i in unique(group[,1])){\n      count <- count + 1\n      n <- length(which(df[,1] == i))\n      text <- paste(\"Number of samples remaining in group\",i,\":\",n)\n      info <- cbind(info,text)\n    }\n    \n    cat(info, sep = \"\\n\")\n    \n  })\n  \n  #Interactive heatmap\n  makePlot4.1 <- function(){\n    variable <- files[,colnames(files) %in% selec_var()[[1]],drop = FALSE]\n    \n    nam <- files[,colnames(files) %in% colnames(files)[1], drop = FALSE]\n    \n    group <- files[,colnames(files) %in% selec_var()[[2]], drop = FALSE]\n    group[,1] <- as.factor(group[,1])\n    \n    group$nam <- nam[,1]\n    \n    rownames(variable) <- paste(nam[,1],group[,1],sep=\".\")\n    \n    variable <- na.omit(variable)\n    \n    if(input$type4.1 == 1){\n      variable <- scale(variable)\n    }\n    \n    p <- heatmaply(t(variable), scale='none', cexCol = 0,\n                   scale_fill_gradient_fun = ggplot2::scale_fill_gradientn(colors = rev(rainbow(20*10, start = 0/6, end = 4/6))),\n                   distfun = function(x) dist(x,method = input$type4.2),\n                   hclustfun = function(x) hclust(x,method = input$type4.3))\n    \n    layout(p,\n           title = input$main4,\n           autosize = FALSE,\n           width = 800,\n           height = 800,\n           margin = list(l = 250, r = 50, b = 250, t = 50, pad = 4)\n    )\n  }\n  \n  #Non-interactive heatmap\n  makePlot4.2 <- function(){\n    variable <- files[,colnames(files) %in% selec_var()[[1]],drop = FALSE]\n    \n    nam <- files[,colnames(files) %in% colnames(files)[1], drop = FALSE]\n    \n    group <- files[,colnames(files) %in% selec_var()[[2]], drop = FALSE]\n    group[,1] <- as.factor(group[,1])\n    \n    rownames(variable) <- nam[,1]\n    \n    variable <- na.omit(variable)\n    \n    if(input$type4.1 == 1){\n      variable <- scale(variable)\n    }\n    \n    p <- heatmap.2(t(variable), key = TRUE, scale = \"none\",\n                   density.info=\"none\", trace = \"none\", main = \"title\", \n                   cexRow = 1, margins = c(4,8),\n                   distfun = function(x) dist(x,method = input$type4.2),\n                   hclustfun = function(x) hclust(x,method = input$type4.3))\n    \n    g_name <- nam\n    g_colour <- rep(0,length(group[,1]))\n    \n    col <- brewer.pal(12,\"Paired\")\n    \n    for (i in 1:length(unique(group[,1]))){\n      for (j in 1:length(group[,1])){\n        if(group[,1][j] == unique(group[,1])[i]){\n          g_colour[j] <- col[i]\n        }\n      }\n    }\n    \n    df <- data.frame(cbind(g_name,g_colour), stringsAsFactors = F) \n    df[,2] <- as.character(df[,2])\n    \n    df2 <- data.frame(rownames(p$carpet))\n    group_col <- NULL\n    for(i in 1:length(df2[,1])){\n      for(j in 1:length(df[,1])){\n        if(df2[,1][i] == df[,1][j])\n          group_col <- c(group_col,df[,2][j])\n      }\n    }\n    \n    leg <- as.character(unique(group[,1]))\n    fil <- col[1:length(unique(group[,1]))]\n    \n    my_palette <- rev(rainbow(20*10, start = 0/6, end = 4/6))\n    \n    heatmap.2(t(variable), scale ='none', col=my_palette,\n              key = TRUE, key.xlab = \"Row Z-Score\", density.info=\"none\", trace = \"none\", main = input$main4, \n              ColSideColors = group_col, labCol = NA,margins = c(4,12), cexRow = 1.5,\n              distfun = function(x) dist(x,method = input$type4.2),\n              hclustfun = function(x) hclust(x,method = input$type4.3))\n    \n    par(cex.main=1)\n    legend(\"topright\",\n           title = \"Group\",\n           legend = leg, \n           fill = fil, \n           bty=\"n\", y.intersp = 1, cex=1)\n  }\n\n######################################################################################  \n# Main Page\n######################################################################################  \n  output$title1 <- renderUI({\n    h1(lst[[as.numeric(selec_var()[[3]])]])\n  })\n  \n  lista <- list()\n  lista[[1]] <- tagList(selectInput(\"sub_function\",\n                                    label = h3(\"Select sub function\"), \n                                    choices = c(\"Basic Statistics\" = 1,\n                                                \"Boxplot\" = 2,\n                                                \"Boxplot by group\" = 3)),\n                        actionButton('Get_results', 'Get results'))\n  \n  lista[[2]] <- tagList(selectInput(\"sub_function\",\n                                    label = h3(\"Select sub function\"),\n                                    choices = c(\"Correlation and P-Value Table\" = 1,\n                                                \"Correlation Matrix\" = 2,\n                                                \"Significance Table and Scatterplot\" = 3)),\n                        radioButtons(\"type2\", \"Correlation Type\", \n                                     choices = c(\"Pearson (parametric)\" = \"pearson\",\n                                                 \"Spearman (non-parametric)\" = \"spearman\"),\n                                     inline = T),\n                        actionButton('Get_results', 'Get results'))\n  \n  lista[[3]] <- tagList(helpText(\"There are no sub-functions to select for Principal Component Analysis.\"),\n                        actionButton('Get_results', 'Get results'))\n  \n  lista[[4]] <- tagList(helpText(\"There are no sub-functions to select for Hierarchical Clustering & Heatmaps.\"),\n                        actionButton('Get_results', 'Get results'))\n  \n  #*****************************************#\n  output$select_subfunc <- renderUI({\n    selec_var()\n    lista[[as.numeric(selec_var()[[3]])]]\n  })\n  #*****************************************#\n  \n  listb <- list()\n  listb[[\"1-1\"]] <- tagList(h3(\"Basic Statistics Table\"),\n                            downloadButton('downloadData1.1', 'Download data'),\n                            verbatimTextOutput('text1.1'))\n  \n  output$downloadData1.1 <- downloadHandler(\n    filename = function() {\n      paste('Basic-Stats','.csv', sep='')},\n    content = function(file) {\n      write.csv(makeText1.1(), file)})\n  \n  output$text1.1 <- renderPrint({\n    makeText1.1()\n  })\n  \n  listb[[\"1-2\"]] <- tagList(h3(\"Boxplot\"),\n                            uiOutput(\"Select_all1.2\"),\n                            uiOutput(\"Choice1.2\"),\n                            textInput(\"main1.2\", \"Key in the title of boxplot\"),\n                            downloadButton(\"downloadPlot1.2\", \"Download plot as PDF\"),\n                            plotOutput(\"plot1.2\", height = \"800px\"))\n  \n  output$Select_all1.2 <- renderUI({\n    radioButtons(\"select_all1.2\", paste(\"Select all\", length(selec_var()[[1]]), \"explanatory variables for the boxplot?\"), choices = c(\"Yes\" = 1, \"No\" = 2), selected = 2, inline = T)\n  })\n  \n  output$Choice1.2 <- renderUI({\n    if(input$select_all1.2 == 2){\n      selectizeInput(\"choose_variable1.2\", \"Select variables for the boxplot\", choices = selec_var()[[1]], \n                     multiple = T)\n    }\n    else if(input$select_all1.2 == 1){\n      if(length(selec_var()[[1]]) > 10){\n        selectInput(\"choose_variable1.2\", \"Select variables for the boxplot\", choices = selec_var()[[1]], \n                    multiple = T, selectize = F, selected = selec_var()[[1]], size = 10)\n      }\n      else{\n        selectInput(\"choose_variable1.2\", \"Select variables for the boxplot\", choices = selec_var()[[1]], \n                    multiple = T, selectize = F, selected = selec_var()[[1]], size = length(selec_var()[[1]]))\n      }\n    }\n  })\n  \n  output$downloadPlot1.2 <- downloadHandler(\n    filename = function() {\n      paste('Boxplot','.pdf', sep='')},\n    content = function(file) {\n      ggsave(file, makePlot1.2(25), dpi = 300, width = 30, height = 50, units = \"cm\")})\n  \n  output$plot1.2 <- renderPlot({\n    makePlot1.2(15)\n  })\n  \n  listb[[\"1-3\"]] <- tagList(h3(\"Boxplot by group\"),\n                            uiOutput(\"Select_all1.3\"),\n                            uiOutput(\"Choice1.3\"),\n                            textInput(\"main1.3\", \"Key in the title of boxplot\"),\n                            downloadButton(\"downloadPlot1.3\", \"Download plot as PDF\"),\n                            plotOutput(\"plot1.3\", height = \"800px\"))\n  \n  output$Select_all1.3 <- renderUI({\n    radioButtons(\"select_all1.3\", paste(\"Select all\", length(selec_var()[[1]]), \"explanatory variables for the boxplot?\"), choices = c(\"Yes\" = 1, \"No\" = 2), selected = 2, inline = T)\n  })\n  \n  output$Choice1.3 <- renderUI({\n    if(input$select_all1.3 == 2){\n      selectizeInput(\"choose_variable1.3\", \"Select variables for the boxplot\", choices = selec_var()[[1]], \n                     multiple = T)\n    }\n    else if(input$select_all1.3 == 1){\n      if(length(selec_var()[[1]]) > 10){\n        selectInput(\"choose_variable1.3\", \"Select variables for the boxplot\", choices = selec_var()[[1]], \n                    multiple = T, selectize = F, selected = selec_var()[[1]], size = 10)\n      }\n      else{\n        selectInput(\"choose_variable1.3\", \"Select variables for the boxplot\", choices = selec_var()[[1]], \n                    multiple = T, selectize = F, selected = selec_var()[[1]], size = length(selec_var()[[1]]))\n      }\n    }\n  })\n  \n  output$downloadPlot1.3 <- downloadHandler(\n    filename = function() {\n      paste('Boxplot by group','.pdf', sep='')},\n    content = function(file) {\n      ggsave(file, makePlot1.3(25), dpi = 300, width = 30, height = 50, units = \"cm\")})\n  \n  output$plot1.3 <- renderPlot({\n    makePlot1.3(15)\n  })\n  \n  listb[[\"2-1\"]] <- tagList(h3(\"Correlation Table\"),\n                            downloadButton('downloadData2.1.1', 'Download data'),\n                            verbatimTextOutput('text2.1.1'),\n                            \n                            br(),\n                            \n                            h3(\"P-Value Table\"),\n                            downloadButton('downloadData2.1.2', 'Download data'),\n                            verbatimTextOutput('text2.1.2'))\n  \n  output$downloadData2.1.1 <- downloadHandler(\n    filename = function() {\n      paste('Correlation Table','.csv', sep='')},\n    content = function(file) {\n      write.csv(makeText2.1.1(), file)})\n  \n  output$text2.1.1 <- renderPrint({\n    makeText2.1.1()\n  }, width = 150)\n  \n  output$downloadData2.1.2 <- downloadHandler(\n    filename = function() {\n      paste('P-Value Table','.csv', sep='')},\n    content = function(file) {\n      write.csv(makeText2.1.2(), file)})\n  \n  output$text2.1.2 <- renderPrint({\n    makeText2.1.2()\n  }, width = 150)\n  \n  listb[[\"2-2\"]] <- tagList(h3(\"Correlation Matrix\"),\n                            uiOutput(\"Select_all2.2\"),\n                            uiOutput(\"Choice2.2\"),\n                            \n                            textInput(\"main2.2\", \"Key in the title of correlation matrix\"),\n                            downloadButton('downloadPlot2.2', 'Download the plot as PDF'),\n                            plotOutput(\"Plot2.2\", height = \"800px\"))\n  \n  output$Select_all2.2 <- renderUI({\n    radioButtons(\"select_all2.2\", paste(\"Select all\", length(selec_var()[[1]]), \"explanatory variables for the boxplot?\"), choices = c(\"Yes\" = 1, \"No\" = 2), selected = 1, inline = T)\n  })\n  \n  output$Choice2.2 <- renderUI({\n    selec_var()\n    if(input$select_all2.2 == 2){\n      selectizeInput(\"choose_variable2.2\", \"Select at least 2 variables for the correlation matrix\", choices = selec_var()[[1]], \n                     multiple = T)\n    }\n    else if(input$select_all2.2 == 1){\n      if(length(selec_var()[[1]]) > 10){\n        selectInput(\"choose_variable2.2\", \"Select at least 2 for the correlation matrix\", choices = selec_var()[[1]], \n                    multiple = T, selectize = F, selected = selec_var()[[1]], size = 10)\n      }\n      else{\n        selectInput(\"choose_variable2.2\", \"Select at least 2 for the correlation matrix\", choices = selec_var()[[1]], \n                    multiple = T, selectize = F, selected = selec_var()[[1]], size = length(selec_var()[[1]]))\n      }\n    }\n  })\n  \n  output$downloadPlot2.2 <- downloadHandler(\n    filename = function() {\n      paste('Correlation Matrix','.pdf', sep='')},\n    content = function(file) {\n      ggsave(file, makePlot2.2(20), dpi = 300, height = 30, width = 30, units = \"cm\")})\n  \n  output$Plot2.2 <- renderPlot({\n    makePlot2.2(10)\n  })\n  \n  listb[[\"2-3\"]] <- tagList(h3(\"Significance Table\"),\n                            uiOutput(\"Text2.3.1\"),\n                            downloadButton('downloadData2.3', 'Download data'),\n\n                            br(),\n                            br(),\n                            br(),\n\n                            fluidRow(\n                              column(4, uiOutput('Choice2.3.1')),\n                              column(8, uiOutput(\"Choose_alpha_level2.3\"))\n                              ),\n                            \n                            dataTableOutput('table2.3'),\n\n                            br(),\n                            br(),\n                            br(),\n                            \n                            uiOutput(\"Title2.3\"),\n                            \n                            br(),\n                            \n                            uiOutput(\"Text2.3.2\"),\n                            uiOutput(\"Main2.3\"),\n                            \n                            br(),\n                            uiOutput(\"Type2.3.1\"),\n                            \n                            fluidRow(\n                              column(4, uiOutput('Choice2.3.2')),\n                              column(8, uiOutput('Choice2.3.3'))\n                              ),\n                            \n                            uiOutput(\"DownloadPlot2.3\"),\n                            uiOutput(\"Plot2.3\"),\n                            \n                            br(),\n                            \n                            fluidRow(\n                              column(6, uiOutput(\"Title2.3.1\"),\n                                     uiOutput(\"Hover_info2.3\")),\n                              column(6, uiOutput(\"Title2.3.2\"),\n                                     uiOutput(\"Brush_info2.3\"))\n                              ))\n  \n  output$Text2.3.1 <- renderUI({\n    verbatimTextOutput(\"text2.3.1\")\n  })\n  \n  output$text2.3.1 <- renderPrint({\n    makeText2.3.1()\n  })\n  \n  output$downloadData2.3 <- downloadHandler(\n    filename = function() {\n      paste('Significance Table','.csv', sep='')},\n    content = function(file) {\n      write.csv(makeTable2.3(), file, row.names = F)})\n  \n  output$Choice2.3.1 <- renderUI({\n    selectizeInput(\"choose_variable_2.3.1\", \"Select a variable\", choices = selec_var()[[1]])\n  })\n  \n  output$Choose_alpha_level2.3 <- renderUI({\n    numericInput(\"choose_alpha_level2.3\", \"Input significance level (between 0 and 1)\", value = 0.05, min = 0, max = 1)\n  })\n  \n  output$table2.3 <- renderDataTable({\n    makeTable2.3()\n  })\n  \n  output$Title2.3 <- renderUI({\n    if(length(rownames(makeTable2.3())) > 0){\n      h3(\"Scatterplot\")\n    }\n  })\n  \n  output$Text2.3.2 <- renderUI({\n    if(length(rownames(makeTable2.3())) > 0){\n      verbatimTextOutput(\"text2.3.2\")\n    }\n  })\n  \n  output$text2.3.2 <- renderPrint({\n    makeText2.3.2()\n  })\n  \n  output$Main2.3 <- renderUI({\n    if(length(rownames(makeTable2.3())) > 0){\n      textInput(\"main2.3\", \"Key in the title of scatterplot\")\n    }\n  })\n  \n  output$Type2.3.1 <- renderUI({\n    if(length(rownames(makeTable2.3())) > 0){\n      radioButtons(\"type2.3.1\", \"Display by group variable?\", choices = c(\"Yes\" = 1, \"No\" = 2), selected = 2, inline = T)\n    }\n  })\n  \n  output$Choice2.3.2 <- renderUI({\n    if(length(rownames(makeTable2.3())) > 0){\n      selectizeInput(\"choose_variable_2.3.2\", \"Variable X\", choices = input$choose_variable_2.3.1)\n    }\n  })\n  \n  output$Choice2.3.3 <- renderUI({\n    if(length(rownames(makeTable2.3())) > 0){\n      selectizeInput(\"choose_variable_2.3.3\", \"Select variable Y\", choices = as.character(makeTable2.3()[,1]))\n    }\n  })\n\n  output$DownloadPlot2.3 <- renderUI({\n    if(length(rownames(makeTable2.3())) > 0){\n      downloadButton('downloadPlot2.3', 'Download the plot as pdf')\n    }\n  })\n  \n  output$downloadPlot2.3 <- downloadHandler(\n    filename = function() {\n      paste('Scatterplot','.pdf', sep='')},\n    content = function(file) {\n      ggsave(file, makePlot2.3(25), dpi = 300, height = 30, width = 50, units = \"cm\")})\n  \n  output$Plot2.3 <- renderUI({\n    if(length(rownames(makeTable2.3())) > 0){\n      plotOutput(\"plot2.3\", height = \"500px\", hover = \"plot1_hover2.3\", brush = \"plot1_brush2.3\")\n    }\n  })\n  \n  output$plot2.3 <- renderPlot({\n    makePlot2.3(15)\n  })\n  \n  output$Title2.3.1 <- renderUI({\n    if(length(rownames(makeTable2.3())) > 0){\n      h3(\"Hovered point\")\n    }\n  })\n  \n  output$Title2.3.2 <- renderUI({\n    if(length(rownames(makeTable2.3())) > 0){\n      h3(\"Selected points\")\n    }\n  })\n  \n  output$Hover_info2.3<- renderUI({\n    if(length(rownames(makeTable2.3())) > 0){\n      verbatimTextOutput(\"hover_info2.3\")\n    }\n  })\n  \n  output$Brush_info2.3<- renderUI({\n    if(length(rownames(makeTable2.3())) > 0){\n      verbatimTextOutput(\"brush_info2.3\")\n    }\n  })\n  \n  output$hover_info2.3<- renderPrint({\n    variable <- files[,colnames(files) %in% c(input$choose_variable_2.3.2, input$choose_variable_2.3.3),drop = FALSE]\n    group <- files[,colnames(files) %in% selec_var()[[2]], drop = FALSE]\n    ID <- files[,1, drop = F]\n    \n    variable_1 <- na.omit(variable)\n    group_1 <- group[as.numeric(rownames(variable_1)),]\n    ID_1 <- ID[as.numeric(rownames(variable_1)),]\n    \n    df <- cbind(ID_1, group_1, variable_1)\n    df[,2] <- as.factor(df[,2])\n    \n    colnames(df)[1:2] <- c(\"ID\", \"Group\")\n    \n    nearPoints(df, input$plot1_hover2.3, xvar = input$choose_variable_2.3.2, yvar = input$choose_variable_2.3.3, threshold = 10, maxpoints = 1)\n  })\n  \n  output$brush_info2.3 <- renderPrint({\n    variable <- files[,colnames(files) %in% c(input$choose_variable_2.3.2, input$choose_variable_2.3.3),drop = FALSE]\n    group <- files[,colnames(files) %in% selec_var()[[2]], drop = FALSE]\n    ID <- files[,1, drop = F]\n    \n    variable_1 <- na.omit(variable)\n    group_1 <- group[as.numeric(rownames(variable_1)),]\n    ID_1 <- ID[as.numeric(rownames(variable_1)),]\n    \n    df <- cbind(ID_1, group_1, variable_1)\n    df[,2] <- as.factor(df[,2])\n    \n    colnames(df)[1:2] <- c(\"ID\", \"Group\")\n    \n    brushedPoints(df, input$plot1_brush2.3, xvar = input$choose_variable_2.3.2, yvar = input$choose_variable_2.3.3)\n  })\n  \n  listb[[\"3\"]] <- tagList(h3('Result of principal component analysis'),\n                          radioButtons(\"type3.1\", \"Standardize variables?\",\n                                       choices = c(\"Yes\" = 1,\n                                                   \"No\" = 2),\n                                       inline = T),\n                          downloadButton('downloadData3', 'Download data'),\n                          verbatimTextOutput('text3.1'),\n                          \n                          br(),\n                          uiOutput(\"Choice3.1\"),\n                          uiOutput(\"Choice3.2\"),\n                          \n                          br(),\n\n                          h3('PCA Biplot'),\n                          textInput(\"main3\", \"Key in the title of PCA plot\"),\n                          downloadButton('downloadPlot3', 'Download the plot as pdf'),\n                          verbatimTextOutput(\"text3.2\"),\n                          plotOutput(\"plot3\", height = 800, width = 800, hover = \"plot1_hover3\", brush = \"plot1_brush3\"),\n\n                          br(),\n\n                          fluidRow(\n                            column(6, h4(\"Hovered point\"),\n                                   verbatimTextOutput(\"hover_info3\")),\n                            column(6, h4(\"Selected points\"),\n                                   verbatimTextOutput(\"brush_info3\"))\n                            ))\n  \n  output$downloadData3 <- downloadHandler(\n    filename = function() {\n      paste('PCA Result','.csv', sep='')},\n    content = function(file) {\n      write.csv(makeText3.1(), file)})\n  \n  output$text3.1<- renderPrint(\n    makeText3.1()\n  )\n  \n  output$Choice3.1 <- renderUI({\n    radioButtons(\"type3.2\", \"Select first principal component\", \n                 choices = colnames(makeText3.1()),\n                 inline = T)\n  })\n  \n  output$Choice3.2<- renderUI({\n    radioButtons(\"type3.3\", \"Select second principal component\", \n                 choices = colnames(makeText3.1())[-which(colnames(makeText3.1()) == input$type3.2)],\n                 inline = T)\n  })\n \n  output$downloadPlot3 <- downloadHandler(\n    filename = function() {\n      paste('PCA Biplot','.pdf', sep='')},\n    content = function(file) {\n      ggsave(file, makePlot3(20), dpi = 300, height = 30, width = 30, units = \"cm\")})\n  \n  output$text3.2 <- renderPrint({\n    makeText3.2()\n  })\n  \n  output$plot3 <- renderPlot({\n    makePlot3(15)\n  })\n  \n  output$hover_info3 <- renderPrint({\n    variable <- files[,colnames(files) %in% selec_var()[[1]],drop = FALSE]\n    group <- files[,colnames(files) %in% selec_var()[[2]], drop = FALSE]\n    ID <- files[,1,drop = FALSE]\n    \n    variable_1 <- na.omit(variable)\n    group_1 <- factor(group[as.numeric(rownames(variable_1)),])\n    ID_1 <- ID[as.numeric(rownames(variable_1)),]\n    \n    if(input$type3.1 == 1){\n      var.pca <- prcomp(variable_1, center = TRUE, scale. = TRUE) \n    }\n    \n    if(input$type3.1 == 2){\n      var.pca <- prcomp(variable_1, center = FALSE, scale. = FALSE) \n    }\n    \n    df <- cbind(ID_1,group_1,variable_1,var.pca$x)\n    \n    colnames(df)[1:2] <- c(\"ID\", \"Group\")\n    \n    nearPoints(df, input$plot1_hover3, xvar = input$type3.2, yvar = input$type3.3, threshold = 10, maxpoints = 1)[,c(1:2)]\n  })\n  \n  output$brush_info3 <- renderPrint({\n    variable <- files[,colnames(files) %in% selec_var()[[1]],drop = FALSE]\n    group <- files[,colnames(files) %in% selec_var()[[2]], drop = FALSE]\n    ID <- files[,1,drop = FALSE]\n    \n    variable_1 <- na.omit(variable)\n    group_1 <- factor(group[as.numeric(rownames(variable_1)),])\n    ID_1 <- ID[as.numeric(rownames(variable_1)),]\n    \n    if(input$type3.1 == 1){\n      var.pca <- prcomp(variable_1, center = TRUE, scale. = TRUE) \n    }\n    \n    if(input$type3.1 == 2){\n      var.pca <- prcomp(variable_1, center = FALSE, scale. = FALSE) \n    }\n    \n    df <- cbind(ID_1,group_1,variable_1,var.pca$x)\n    colnames(df)[1:2] <- c(\"ID\", \"Group\")\n    \n    brushedPoints(df, input$plot1_brush3, xvar = input$type3.2, yvar = input$type3.3)[,c(1:2)]\n  })\n  \n  listb[[\"4\"]] <- tagList(h3(\"Results of Hierarchical Clustering & Heatmaps\"),\n                          radioButtons(\"type4.1\", \"Standardize variable?\",\n                                       choices = c(\"Yes\" = 1,\n                                                   \"No\" = 2),\n                                       inline = T),\n                          radioButtons(\"type4.2\", \"Distance Type\",\n                                       c(\"Euclidean\" = \"euclidean\",\n                                         \"Maximum\" = \"maximum\",\n                                         \"Manhattan\" = \"manhattan\",\n                                         \"Canberra\" = \"canberra\",\n                                         \"Binary\" = \"binary\",\n                                         \"Minkowski\" = \"minkowski\"),\n                                       selected = \"euclidean\",\n                                       inline = T),\n                          radioButtons(\"type4.3\", \"Cluster Method\",\n                                       c(\"Ward\" = \"ward\",\n                                         \"Single\" = \"single\",\n                                         \"Complete\" = \"complete\",\n                                         \"Average\" = \"average\",\n                                         \"Mcquitty\" = \"mcquitty\",\n                                         \"Median\" = \"median\",\n                                         \"Centroid\" = \"centroid\"),\n                                       selected = \"ward\",\n                                       inline = T),\n                         \n                          br(),\n\n                          h3('Cluster Dendrogram'),\n                          textInput(\"main4\", \"Key in the title of Cluster Dendrogram\"),\n                          downloadButton('downloadPlot4', 'Download the plot as png'),\n                          plotOutput(\"plot4\",height = \"800px\"),\n                          plotlyOutput(\"plot4.1\",height = \"800px\"))\n  \n  output$downloadPlot4 <- downloadHandler(\n    filename = function() {\n      paste('Heatmap','.png', sep='')},\n    content = function(file) {\n      png(file,antialias = \"cleartype\", height = 700, width = 700)\n      print(makePlot4.2())\n      dev.off()})\n  \n  output$plot4 <- renderPlot({\n    makePlot4.2()\n  })\n  \n  output$plot4.1 <- renderPlotly({\n    makePlot4.1()\n  })\n  \n  #****************************************************************#\n  output$output1 <- renderUI({\n    selec_var()\n    if(selec_var()[[3]] == 3 | selec_var()[[3]] == 4){\n      listb[[selec_var()[[3]]]]\n    }\n    else{\n      listb[[paste(selec_var()[[3]],input$sub_function,sep=\"-\")]]\n    }\n  })\n  #****************************************************************#\n\n})\n",
    "created" : 1467248858544.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2152271056",
    "id" : "251987D4",
    "lastKnownWriteTime" : 1467194172,
    "last_content_update" : 1467194172,
    "path" : "~/Desktop/CombinedApp/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}